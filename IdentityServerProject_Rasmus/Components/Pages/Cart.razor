@page "/cart"
@using IdentityServerProject_Rasmus.Shared.DTOs
@using IdentityServerProject_Rasmus.Shared.Interfaces
@using IdentityServerProject_Rasmus.API.Services
@rendermode InteractiveServer
@inject IService<ShopProductDto, Guid> ProductService
@inject IService<UserCartDto, string> UserCartService
@inject UserInfoService UserInfoService
@attribute [StreamRendering]

<PageTitle>Cart</PageTitle>

<h1>Cart</h1>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h4>Products</h4>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Image</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                @if (UserCart != null)
                {
                    <Virtualize Items="UserCart">
                        <tr>
                            <td>@context.Id</td>
                            <td>@context.Name</td>
                            <td>@context.Price</td>
                            <td><img src="@context.ImageUrl" alt="(@context.Name+'jpg')" width="50" height="50"/></td>
                            <td>
                                <button class="btn btn-primary">Edit</button>
                                <button class="btn btn-danger">Delete</button>
                            </td>
                        </tr>
                    </Virtualize>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<ShopProductDto>? UserCart { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var userId = await UserInfoService.GetLoggedInUserEmail();
        var foundCart = await UserCartService.GetByIdAsync(userId);

        if (foundCart == null)
        {
            var newCart = new UserCartDto()
            {
                ShopProducts = new List<ShopProductDto>(),
                UserEmail = userId
            };
            await UserCartService.CreateAsync(newCart);
        }
        else
        {
            UserCart.AddRange(foundCart.ShopProducts);
        }

        

    }


}
